#!/usr/bin/env python
from vectorpack.packs import get_pack_names, get_pack
from vectorpack.sorts import get_sort_names, get_sort
from vectorpack.selects import get_select_names, get_select
from vectorpack.util import verify_mapping

def main(argv=None):
    from argparse import ArgumentParser
    from os.path import isfile
    from sys import stdin, stdout
    from yaml import load as yload

    try:
        from yaml import CLoader as YLoader
    except ImportError:
        from yaml import Loader as YLoader

    packnames = get_pack_names()
    sortnames = get_sort_names()
    selectnames = get_select_names()

    parser = ArgumentParser(description="Solve a vector packing problem.")
    parser.add_argument('-i', '--inputfile', help='input file')
    parser.add_argument('-o', '--outputfile', default='-', help='output file')
    parser.add_argument('-P', '--pack', choices=packnames, default='best_fit', 
                        help='packing algorithm')
    parser.add_argument('-I', '--itemsort', choices=sortnames, default='none', 
                        help='item sorting algorithm')
    parser.add_argument('-B', '--binsort', choices=sortnames, default='none', 
                        help='bin sorting algorithm')
    parser.add_argument('-S', '--select', choices=selectnames, default='none', 
                        help='pairwise selection algorithm')

    args = parser.parse_args()

    problem = {}
    if isfile(args.inputfile):
        problem = yload(open(args.inputfile, 'r'), Loader=YLoader)
    else:
        raise SystemExit("error: can't find file %s" % args.inputfile)

    items = problem.get('items', None)
    boxes = problem.get('boxes', None)
    pack = get_pack(args.pack)
    itemsort = get_sort(args.itemsort)
    binsort = get_sort(args.binsort)
    select = get_select(args.select)

    mapping = pack(items=items, boxes=boxes, item_key=itemsort, box_key=binsort,
               pair_key=select)
    
    print mapping
    print verify_mapping(items=items, boxes=boxes, mapping=mapping)

if __name__ == "__main__":
    main() 
