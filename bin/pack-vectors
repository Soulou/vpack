#!/usr/bin/env python
def main(argv=None):
    from argparse import ArgumentParser
    from collections import Counter
    from numpy import array
    from os.path import isfile
    from sys import stdin, stdout
    import time
    from yaml import load as yload, dump as ydump

    try:
        from yaml import CLoader as YLoader
    except ImportError:
        from yaml import Loader as YLoader

    try:
        from yaml import CDumper as YDumper
    except ImportError:
        from yaml import YDumper

    from vectorpack.packs import get_pack_names, get_pack
    from vectorpack.sorts import get_sort_names, get_sort
    from vectorpack.selects import get_select_names, get_select
    from vectorpack.util import verify_mapping

    packnames = get_pack_names()
    sortnames = get_sort_names()
    selectnames = get_select_names()

    parser = ArgumentParser(description="Solve a vector packing problem.")
    parser.add_argument('-i', '--inputfile', help='input file')
    parser.add_argument('-o', '--outputfile', default='-', help='output file')
    parser.add_argument('-P', '--pack', choices=packnames, default='best_fit', 
                        help='packing algorithm')
    parser.add_argument('-I', '--itemsort', choices=sortnames, default='none', 
                        help='item sorting algorithm')
    parser.add_argument('-B', '--binsort', choices=sortnames, default='none', 
                        help='bin sorting algorithm')
    parser.add_argument('-S', '--select', choices=selectnames, default='none', 
                        help='pairwise selection algorithm')

    args = parser.parse_args()

    problem = {}
    if isfile(args.inputfile):
        problem = yload(open(args.inputfile, 'r'), Loader=YLoader)
    else:
        raise SystemExit("error: can't find file %s" % args.inputfile)

    items = array(problem.get('items', None))
    boxes = array(problem.get('boxes', None))
    pack = get_pack(args.pack)
    item_key = get_sort(args.itemsort)
    bin_key = get_sort(args.binsort)
    select_key = get_select(args.select)

    start_time = time.process_time()
    mapping = pack(items=items, boxes=boxes, item_key=item_key, box_key=bin_key, 
                   select_key=select_key)
    stop_time = time.process_time()

    solution = {
        'problem-argshash' : problem.get('argshash', None),
        'pack' : args.pack,
        'itemsort' : args.itemsort,
        'binsort' : args.binsort,
        'select' : args.select,
        'success' : mapping is not None,
        'mapping' : mapping,
        'bincount' : len(Counter(mapping)),
        'runtime' : stop_time - start_time,
        'verified' : verify_mapping(items=items, boxes=boxes, mapping=mapping)
    }

    print(ydump(solution, Dumper=YDumper))
    

if __name__ == "__main__":
    main() 
