#!/usr/bin/env python3
# FIXME: theoretically, slack and load should be vectors?
# FIXME: theoretically, this might not be a great way to generate problem
# instances...

def main(argv=None):
    from argparse import ArgumentParser
    from hashlib import sha1
    import random
    from yaml import dump
    try:
        from yaml import CDumper as Dumper
    except ImportError:
        from yaml import Dumper

    parser = ArgumentParser(description="Generate a random problem instance.")
    parser.add_argument('-s', '--seed', type=int, help='seed for random number generator')
    parser.add_argument('-d', '--num_dimensions', type=int, help='number of dimensions')
    parser.add_argument('-b', '--num_boxes', type=int, help='number of boxes')
    parser.add_argument('-i', '--num_items', type=int, help='number of items')
    parser.add_argument('-c', '--cov', type=float, help='box dimension cov')
    parser.add_argument('-k', '--slack', type=float, help='slack')
    parser.add_argument('-n', '--note', help='note')

    args = parser.parse_args()

    random.seed(args.seed) 

    boxes = [[max(1, min(int(random.normalvariate(50, 50 * args.cov)), 100))
              for i in range(args.num_dimensions)]
              for j in range(args.num_boxes)]

    # FIXME: might revisit this, but rescale in every dimension so largest is
    # 100...want to avoid having one dimension totally dominate another...
    
    
    #boxdim_ratios = [100.0 / max(box[i] for box in boxes) 
    #                for i in range(args.num_dimensions)]

    #boxes = [[int(val * ratio) for val, ratio in zip(box, boxdim_ratios)] 
    #         for box in boxes]

    boxdim_totals = [sum(box[i] for box in boxes) 
                     for i in range(args.num_dimensions)]

    boxes = [[max(1, int(val * (50.0 * args.num_boxes / total))) for val, total in
             zip(box, boxdim_totals)] for box in boxes]

    boxdim_totals = [sum(box[i] for box in boxes) 
                     for i in range(args.num_dimensions)]

    items = [[random.randint(1, 100) for i in range(args.num_dimensions)] 
             for j in range(args.num_items)]

    itemdim_totals = [sum(item[i] for item in items)
                      for i in range(args.num_dimensions)]

    for item in items:
        for i in range(args.num_dimensions):
            item[i] = max(1, int(item[i] * (1.0 - args.slack) * 
                                    boxdim_totals[i] / itemdim_totals[i]))

    print('argshash: ' + sha1(str(vars(args)).encode('utf-8')).hexdigest())
    print(dump({'args' : vars(args)}, Dumper=Dumper), end='')
    print(dump({'boxes' : boxes }, Dumper=Dumper), end='')
    print(dump({'items' : items }, Dumper=Dumper), end='')

if __name__ == "__main__":
    main()
